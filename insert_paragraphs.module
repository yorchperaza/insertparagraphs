<?php

/**
 * @file
 */

require_once __DIR__ . DIRECTORY_SEPARATOR . 'insert_paragraphs.update.php';

use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\insert\Utility\InsertUtility;
use Drupal\Core\Entity\EntityInterface;

use Drupal\paragraphs\Entity\Paragraph;

const INSERT_TYPE_PARAGRAPHS = 'paragraphs';

const INSERT_PARAGRAPHS_DEFAULT_SETTINGS = [
    'view_modes' => [],
    'default' => 'full',
];

/**
 * Implements hook_insert_widgets().
 */
function insert_paragraphs_insert_widgets() {
    return [INSERT_TYPE_PARAGRAPHS => ['paragraphs']];
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function insert_paragraphs_field_widget_third_party_settings_form(WidgetInterface $plugin) {
    $pluginId = $plugin->getPluginId();
    if (InsertUtility::isSourceWidget($pluginId, INSERT_TYPE_PARAGRAPHS)) {
        return _insert_paragraphs_settings_form(_insert_paragraphs_settings($plugin));
    }
}

/**
 * @param \Drupal\Core\Field\WidgetInterface $plugin
 * @return array
 */
function _insert_paragraphs_settings($plugin) {
    $settings = array_merge(
        INSERT_PARAGRAPHS_DEFAULT_SETTINGS,
        $plugin->getThirdPartySettings('insert_paragraphs')
    );
    $viewModeIds = array_keys(_insert_paragraphs_get_view_modes());
    $settings['view_modes'] = array_fill_keys($viewModeIds, $viewModeIds);


    // Ensure default view mode is in the set of view modes.
    if (!in_array($settings['default'], $settings['view_modes'], TRUE)) {
        $settings['view_modes'][$settings['default']] = $settings['default'];
    }

    return $settings;
}

/**
 * @param array $settings
 * @return array
 */
function _insert_paragraphs_settings_form(array $settings) {
    $viewModes = _insert_paragraphs_get_view_modes();

    $element = [
        '#type' => 'details',
        '#title' => t('Insert Paragraphs'),
        '#weight' => 20,
    ];

    $element['view_modes_heading'] = [
        '#type' => 'markup',
        '#markup' => t('Select which view modes should be available for inserting paragraphs. If no view mode is selected, no Insert functionality will be available; If only one view mode is selected, that one is used automatically when inserting. If all view modes are selected, new view modes will be enabled by default.'),
        '#weight' => 21,
    ];

    $element['view_modes'] = [
        '#type' => 'table',
        '#default_value' => $settings['view_modes'],
        '#element_validate' => [[InsertUtility::class, 'validateList']],
        '#weight' => 22,
        '#tableselect' => TRUE,
        '#header' => [t('Select all')],
    ];

    foreach ($viewModes as $viewMode => $viewModeLabel) {
        $element['view_modes'][$viewMode][$viewMode] = [
            '#type' => 'markup',
            '#markup' => $viewModeLabel,
        ];
    }

    $element['default'] = [
        '#title' => t('Default view mode'),
        '#type' => 'select',
        '#options' => array_map(function ($viewModeLabel) {
            return $viewModeLabel;
        }, $viewModes),
        '#default_value' => $settings['default'],
        '#description' => t('Select the view mode which will be selected by default or used if no other view modes are enabled above.'),
        '#weight' => 23,
    ];

    return $element;
}

/**
 * Implements hook_insert_process().
 */
function insert_paragraphs_insert_process(&$insertType, array &$element) {
    if ($insertType !== INSERT_TYPE_PARAGRAPHS) {
        return [];
    }
    $settings = $element['#insert_paragraphs']['settings'];
    $element['#insert']['settings']['styles'] = $settings['view_modes'];
    $element['#insert']['settings']['default'] = $settings['default'];

    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
    $entityTypeManager = \Drupal::entityTypeManager();

    foreach ($element['selection'] as $key => &$selectionElement) {
        if (!is_int($key)) {
            continue;
        }
        $paragraphs = Paragraph::load($element['selection'][$key]['target_id']['#value']);
        $selectionElement['insert'] = $element['insert'];

        $selectionElement['insert']['templates'] = [
            '#type' => 'container',
            '#attributes' => ['class' => ['insert-templates']],
        ];

        $options = [];

        foreach ($settings['view_modes'] as $viewMode => $viewModeLabel) {
            if ($viewModeLabel === 0) {
                continue;
            }

            $selectionElement['insert']['templates'][$viewMode] = [
                '#type' => 'hidden',
                '#name' => 'template[' . $viewMode . ']',
                '#value' => '<drupal-paragraphs data-entity-type="paragraphs" data-view-mode="' . $viewMode .'" data-entity-uuid="' . $paragraphs->uuid() . '"></drupal-paragraphs>',
            ];

            $options[$viewMode] = $viewModeLabel;
        }

        if (count($options) === 1) {
            $selectionElement['insert']['view_modes'] = [
                '#type' => 'hidden',
                '#value' => array_keys($options)[0],
            ];
        }
        else {
            $selectionElement['insert']['view_modes'] = [
                '#type' => 'select',
                '#options' => $options,
                '#default_value' => $settings['default'],
            ];
        }
    }

    $element['#attached']['library'][] = 'insert_paragraphs/insert_paragraphs';

    return ['selection'];
}

/**
 * Returns all paragraphs view modes.
 *
 * @return \Drupal\Core\Entity\EntityViewModeInterface[]
 */
function _insert_paragraphs_get_view_modes() {
    $viewModes = \Drupal::entityTypeManager()
        ->getStorage('entity_view_mode')
        ->loadByProperties(['targetEntityType' => 'paragraph']);
    foreach ($viewModes as $id => $viewMode) {
        // Settings cannot be saved with a dot.
        $rekeyedViewModes[str_replace('paragraph.', '', $id)] = $viewMode->label();
    }

    return $rekeyedViewModes;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function insert_paragraphs_field_widget_form_alter(array &$element, FormStateInterface $form_state, array $context) {
    /** @var \Drupal\Core\Field\WidgetInterface $plugin */
    $plugin = $context['widget'];
    $pluginId = $plugin->getPluginId();

    if (InsertUtility::isSourceWidget($pluginId, INSERT_TYPE_PARAGRAPHS)) {
        $element['#insert_paragraphs'] = [
            'settings' => _insert_paragraphs_settings($plugin),
        ];
    }
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function insert_paragraphs_field_widget_settings_summary_alter(array &$summary, array $context) {
    /** @var \Drupal\Core\Field\WidgetInterface $plugin */
    $plugin = $context['widget'];
    $pluginId = $plugin->getPluginId();

    if (InsertUtility::isSourceWidget($pluginId, INSERT_TYPE_PARAGRAPHS)) {
        $viewModes = _insert_paragraphs_get_view_modes();
        $settings = _insert_paragraphs_settings($plugin);
        $activeViewModes = array_intersect_key($viewModes, array_filter($settings['view_modes']));

        $summary[] = t('Insert Paragraphs') . ': ' . (count($activeViewModes)
                ? implode(', ', array_map(function ($viewModeLabel) {
                    return $viewModeLabel;
                }, $activeViewModes))
                : t('disabled')
            );
    }
}

/**
 * Implements hook_module_implements_alter().
 */
function insert_paragraphs_module_implements_alter(array &$implementations, $hook) {
    if ($hook === 'field_widget_third_party_settings_form') {
        // Move hook_field_widget_third_party_settings_form() implementation to the
        // end of the execution list to have it processed after
        // insert_field_widget_third_party_settings_form().
        $group = $implementations['insert_paragraphs'];
        unset($implementations['insert_paragraphs']);
        $implementations['insert_paragraphs'] = $group;
    }
}

/**
 * Implements hook_ENTITY_ID_presave().
 *
 * Entity Reference Selection plugins can't perform any logic when submitting
 * the form because they are a sub-form of the field config form.
 */
function insert_paragraphs_paragraph_presave(Paragraph $entity) {
    // Get the default paragraphs settings, return if not saving an paragraphs field storage.
    print_r($entity);
    $default_paragraph = [];
    if (($entity instanceof FieldStorageConfigInterface || $entity instanceof FieldConfigInterface) && $entity
            ->getType() == 'paragraph') {
        $default_paragraph = $entity
            ->getSetting('default_paragraph');
    }
    else {
        return;
    }
    if ($entity
        ->isSyncing()) {
        return;
    }

}
